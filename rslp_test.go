package rslp

import (
	"fmt"
	"testing"
)

func Test_Palavra(t *testing.T) {
	tests := []struct {
		term string
		want string
	}{
		{"correr", "corr"},
		{"bons", "bom"},
		{"bal\u00f5es", "balao"},
		{"capit\u00e3es", "capit"},
		{"normais", "norm"},
		// {"am\u00e1veis", "ama"},
		{"len\u00e7\u00f3is", "lencol"},
		{"barris", "barril"},
		{"males", "mal"},
		{"mares", "mar"},
		{"casas", "cas"},
		{"chefona", "chef"},
		{"vil\u00e3", "vil"},
		{"professora", "profes"},
		{"americana", "americ"},
		{"chilena", "chilen"},
		{"inglesa", "ingl"},
		{"famosa", "fam"},
		{"man\u00edaca", "man"},
		{"pr\u00e1tica", "prat"},
		{"mantida", "mant"},
		{"cansada", "cans"},
		{"prima", "prim"},
		{"passiva", "passiv"},
		{"primeira", "prim"},
		{"sozinha", "so"},
		{"felizmente", "feliz"},
		{"cansad\u00edssimo", "cans"},
		// {"amabil\u00edssimo", "ama"},
		{"fort\u00edssimo", "fort"},
		{"chiqu\u00e9rrimo", "chiqu"},
		{"pezinho", "pe"},
		{"maluquinho", "maluc"},
		{"amiguinho", "amig"},
		{"cansadinho", "cans"},
		{"carrinho", "carr"},
		{"grandalh\u00e3o", "grand"},
		{"dentu\u00e7a", "dent"},
		{"mulhera\u00e7o", "mulh"},
		{"cansad\u00e3o", "cans"},
		{"corp\u00e1zio", "corp"},
		{"pratarraz", "prat"},
		{"bocarra", "boc"},
		{"calorz\u00e3o", "cal"},
		{"menin\u00e3o", "menin"},
		{"existencialista", "exist"},
		{"minimalista", "minim"},
		{"contagem", "cont"},
		{"gerenciamento", "gerenc"},
		{"monitoramento", "monitor"},
		{"nascimento", "nasc"},
		{"comercializado", "comerci"},
		{"traumatizado", "traum"},
		{"alfabetizado", "alfabet"},
		{"associativo", "associ"},
		{"contraceptivo", "contracep"},
		{"esportivo", "espor"},
		{"abalado", "abal"},
		{"impedido", "imped"},
		{"ralador", "ral"},
		{"entendido", "entend"},
		{"cumpridor", "cumpr"},
		// {"obrigat\u00f3ria", "obrig"},
		{"produtor", "produt"},
		{"comparabilidade", "compar"},
		{"abolicionista", "abol"},
		{"intervencionista", "interven"},
		{"profissional", "profiss"},
		{"refer\u00eancia", "refer"},
		{"repugn\u00e2ncia", "repugn"},
		{"abatedouro", "abat"},
		{"fofoqueiro", "fofoc"},
		{"brasileiro", "brasil"},
		{"gostoso", "gost"},
		{"comercializa\u00e7", "comerci"},
		{"consumismo", "consum"},
		{"concretiza\u00e7\u00e3o", "concre"},
		{"alega\u00e7", "aleg"},
		{"aboli\u00e7", "abol"},
		{"anedot\u00e1rio", "anedot"},
		// {"minist\u00e9rio", "minist"},
		{"chin\u00eas", "chin"},
		{"beleza", "bel"},
		{"rigidez", "rigid"},
		{"parentesco", "parent"},
		{"ocupante", "ocup"},
		{"bomb\u00e1stico", "bomb"},
		// {"problem\u00e1tico", "problem"},
		{"pol\u00eamico", "polem"},
		{"produtividade", "produt"},
		{"profundidade", "profund"},
		{"aposentadoria", "aposentad"},
		{"anedot\u00e1rio", "anedot"},
		{"existencial", "exist"},
		{"artista", "artist"},
		{"maluquice", "maluc"},
		{"chatice", "chat"},
		{"demon\u00edaco", "demon"},
		{"decorrente", "decorr"},
		{"criminal", "crim"},
		{"americano", "americ"},
		{"am\u00e1vel", "am"},
		{"combust\u00edvel", "combust"},
		{"cobertura", "cobert"},
		{"consensual", "consens"},
		{"mundial", "mund"},
		{"experimental", "experiment"},
		// {"cantar\u00edamo", "cant"},
		{"cant\u00e1ssemo", "cant"},
		{"beber\u00edamo", "beb"},
		{"beb\u00eassemo", "beb"},
		{"partir\u00edamo", "part"},
		{"part\u00edssemo", "part"},
		{"cant\u00e1ramo", "cant"},
		{"cant\u00e1rei", "cant"},
		{"cantaremos", "cant"},
		{"cantariam", "cant"},
		{"cantar\u00edei", "cant"},
		{"cant\u00e1ssei", "cant"},
		{"cantassem", "cant"},
		{"cant\u00e1vamo", "cant"},
		{"beb\u00earamo", "beb"},
		{"beberemo", "beb"},
		{"beberiam", "beb"},
		{"beber\u00edei", "beb"},
		{"beb\u00eassei", "beb"},
		{"bebessem", "beb"},
		{"partir\u00edamo", "part"},
		{"partiremo", "part"},
		{"partiriam", "part"},
		{"partir\u00edei", "part"},
		{"part\u00edssei", "part"},
		{"partissem", "part"},
		{"cantando", "cant"},
		{"bebendo", "beb"},
		{"partindo", "part"},
		{"propondo", "prop"},
		{"cantaram", "cant"},
		{"cantarde", "cant"},
		{"cantarei", "cant"},
		// {"cantarem", "cant"},
		{"cantaria", "cant"},
		{"cantarmo", "cant"},
		{"cantasse", "cant"},
		{"cantaste", "cant"},
		{"cantavam", "cant"},
		{"cant\u00e1vei", "cant"},
		{"beberam", "beb"},
		{"beberde", "beb"},
		{"beberei", "beb"},
		{"beb\u00earei", "beb"},
		{"beberem", "beb"},
		{"beberia", "beb"},
		{"bebermo", "beb"},
		{"bebesse", "beb"},
		{"bebeste", "beb"},
		{"beb\u00edamo", "beb"},
		{"partiram", "part"},
		{"conclu\u00edram", "conclu"},
		{"partirde", "part"},
		{"partirei", "part"},
		{"partirem", "part"},
		{"partiria", "part"},
		{"partirmo", "part"},
		{"partisse", "part"},
		{"partiste", "part"},
		{"cantamo", "cant"},
		{"cantara", "cant"},
		{"cantar\u00e1", "cant"},
		{"cantare", "cant"},
		{"cantava", "cant"},
		{"cantemo", "cant"},
		{"bebera", "beb"},
		{"beber\u00e1", "beb"},
		{"bebere", "beb"},
		{"bebiam", "beb"},
		{"beb\u00edei", "beb"},
		{"partimo", "part"},
		{"partira", "part"},
		{"partir\u00e1", "part"},
		{"partire", "part"},
		{"compomo", "comp"},
		{"cantai", "cant"},
		{"cantam", "cant"},
		{"cheguei", "cheg"},
		{"cantei", "cant"},
		{"cantem", "cant"},
		{"beber", "beb"},
		{"bebeu", "beb"},
		{"bebia", "beb"},
		{"partir", "part"},
		{"partiu", "part"},
		{"chegou", "cheg"},
		{"bebi", "beb"},
		{"menina", "menin"},
		{"grande", "grand"},
		{"menino", "menin"},
	}
	for i, tt := range tests {
		name := fmt.Sprintf("teste #%d", i+1)
		t.Run(name, func(t *testing.T) {
			if got := Palavra(tt.term); got != tt.want {
				t.Errorf("%s => Palavra() = %v, want %v", tt.term, got, tt.want)
			}
		})
	}
}

func Test_rslp(t *testing.T) {
	tests := []struct {
		term string
		want string
	}{
		{"correr", "corr"},
		{"bons", "bom"},
		// {"balões", "bala"},
		{"capitães", "capit"},
		{"normais", "norm"},
		{"amáveis", "am"},
		{"lençóis", "lencol"},
		{"barris", "barril"},
		{"males", "mal"},
		{"mares", "mar"},
	}
	for i, tt := range tests {
		name := fmt.Sprintf("teste #%d", i+1)
		t.Run(name, func(t *testing.T) {
			if got := Palavra(tt.term); got != tt.want {
				t.Errorf("rslp() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_Frase(t *testing.T) {
	tests := []struct {
		term string
		want string
	}{
		{"Programa de Participação nos Resultados", "program particip result"},
		{"Caixa Gerado nas Operações", "caix ger oper"},
		{"Lucro Líquido do Período", "lucr liqu period"},
		{"Depreciações e Amortizações", "depreci amort"},
		{"Custo das Baixas do Imobilizado e Intangível", "cust baix imobil intang"},
		{"Custos das Baixas do Imobilizado e Intangível", "cust baix imobil intang"},
		{"Ajuste ao Valor Recuperável de Ativos", "ajust ao val recuper ativ"},
		{"Custos das Baixas de Investimentos", "cust baix invest"},
		{"Provisão para Perdas na Realização de Créditos", "provis perd realiz credit"},
		{"Custos das Baixas de Investimentos", "cust baix invest"},
		{"Imposto de Renda e Contribuição Social Diferidos, líquidos", "impost rend contribu soc difer liqu"},
		{"Provisão para Perdas na Realização de Créditos", "provis perd realiz credit"},
		{"Ajuste a Valor Presente - Ativos Financeiros", "ajust val pres ativ financ"},
		{"Ajuste a Valor Presente de Ativos Financeiros", "ajust val pres ativ financ"},
		{"Provisão para Contingências", "provis conting"},
		{"Provisão para Perdas na Realização de Créditos", "provis perd realiz credit"},
		{"Imposto de Renda e Contribuição Social Diferidos, líquidos", "impost rend contribu soc difer liqu"},
		{"Plano de Aposentadoria e Plano de Assistência Médica", "plan aposentad plan assist med"},
		{"Provisão para Perdas na Realização de Créditos", "provis perd realiz credit"},
		{"Imposto de Renda e Contribuição Social Diferidos, líquido", "impost rend contribu soc difer liqu"},
		{"Imposto de Renda e Contribuição Social Diferidos, líquidos", "impost rend contribu soc difer liqu"},
		{"Juros sobre Financiamentos", "jur sobr financ"},
		{"Provisão para Contingências", "provis conting"},
		{"Plano de Aposentadoria e Plano de Assistência Médica", "plan aposentad plan assist med"},
		{"Provisão para Contingências", "provis conting"},
		{"Vairações Monetárias sobre Financiamentos", "vair monetar sobr financ"},
		{"Juros sobre Financiamentos", "jur sobr financ"},
		{"Plano de Aposentadoria e Plano de Assistência Médica", "plan aposentad plan assist med"},
		{"Remuneração Créditos para Aumento de Capital", "remuner credit aument capit"},
		{"Juros sobre Financiamentos", "jur sobr financ"},
		{"Variações Monetárias sobre Financiamentos", "vari monetar sobr financ"},
		{"Remuneração Créditos para Aumento de Capital", "remuner credit aument capit"},
		{"Resultado de Equivalência Patrimonial", "result equival patrimon"},
		{"Variações Monetárias sobre Financiamentos", "vari monetar sobr financ"},
		{"Apropriação de Custos na Captação de Recursos de Terceiros", "apropri cust capt recurs terc"},
		{"Juros e Atualizações Monetárias Arrendamento", "jur atual monetar arrend"},
		{"Juros e Atualizações Monetárias Arrendamento Mercantil", "jur atual monetar arrend mercantil"},
		{"Juros e Atualizações Monetárias Arrendamentos", "jur atual monetar arrend"},
		{"Resultado de Equivalência Patrimonial", "result equival patrimon"},
		{"Apropriação de Custos na Captação de Recursos de Terceiros", "apropri cust capt recurs terc"},
		{"Resultado de Equivalência Patrimonial", "result equival patrimon"},
		{"Variações Cambiais, líquidas", "vari camb liqu"},
		{"Ajuste a Valor Justo - Investimentos", "ajust val just invest"},
		{"Apropriação de Custos na Captação de Recursos de Terceiros", "apropri cust capt recurs terc"},
		{"Variações Instrumentos Financeiros Derivativos", "vari instrument financ deriv"},
		{"Ajuste a Valor Justo - Investimentos", "ajust val just invest"},
		{"Resultado de Equivalência Patrimonial", "result equival patrimon"},
		{"Apropriação de Custos na Captação de Recursos de Terceiros", "apropri cust capt recurs terc"},
		{"Ajuste a Valor Justo - Investimentos", "ajust val just invest"},
	}
	for _, tt := range tests {
		if got := Frase(tt.term); got != tt.want {
			t.Errorf("rslp() = %v, want %v", got, tt.want)
		}
	}
}
